{"ast":null,"code":"var _jsxFileName = \"/Users/yuvvan_talreja/Desktop/Coding/agentic-research/src/App.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nconst SwarmSimulation = () => {\n  const canvasRef = useRef(null);\n  const agentsRef = useRef([]);\n  const animationFrameRef = useRef(null);\n  const [isRunning, setIsRunning] = useState(false);\n  const [metrics, setMetrics] = useState([{\n    timestamp: Date.now(),\n    avgDistance: 0,\n    avgCorrelation: 0,\n    numClusters: 0,\n    avgClusterSize: 0\n  }]);\n  const [settings, setSettings] = useState({\n    numAgents: 50,\n    separationWeight: 2.0,\n    alignmentWeight: 1.0,\n    cohesionWeight: 1.0,\n    neighborRadius: 50,\n    maxSpeed: 3,\n    minSpeed: 1\n  });\n\n  // Initialize agents\n  const initializeAgents = () => {\n    const canvas = canvasRef.current;\n    const newAgents = [];\n    for (let i = 0; i < settings.numAgents; i++) {\n      newAgents.push({\n        x: Math.random() * canvas.width,\n        y: Math.random() * canvas.height,\n        vx: (Math.random() * 2 - 1) * settings.maxSpeed,\n        vy: (Math.random() * 2 - 1) * settings.maxSpeed\n      });\n    }\n    agentsRef.current = newAgents;\n  };\n\n  // Calculate distance between two agents\n  const distance = (a1, a2) => {\n    const dx = a2.x - a1.x;\n    const dy = a2.y - a1.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  };\n\n  // Find neighbors within radius\n  const getNeighbors = (agent, radius) => {\n    return agentsRef.current.filter(other => other !== agent && distance(agent, other) < radius);\n  };\n\n  // Calculate metrics\n  const calculateMetrics = agents => {\n    if (agents.length < 2) return null;\n\n    // Average distance between agents (cohesion metric)\n    let totalDistance = 0;\n    let pairs = 0;\n    for (let i = 0; i < agents.length; i++) {\n      for (let j = i + 1; j < agents.length; j++) {\n        totalDistance += distance(agents[i], agents[j]);\n        pairs++;\n      }\n    }\n    const avgDistance = totalDistance / pairs;\n\n    // Average velocity correlation (alignment metric)\n    let totalCorrelation = 0;\n    pairs = 0;\n    for (let i = 0; i < agents.length; i++) {\n      for (let j = i + 1; j < agents.length; j++) {\n        const dot = agents[i].vx * agents[j].vx + agents[i].vy * agents[j].vy;\n        const mag1 = Math.sqrt(agents[i].vx ** 2 + agents[i].vy ** 2);\n        const mag2 = Math.sqrt(agents[j].vx ** 2 + agents[j].vy ** 2);\n        totalCorrelation += dot / (mag1 * mag2);\n        pairs++;\n      }\n    }\n    const avgCorrelation = totalCorrelation / pairs;\n\n    // Cluster analysis\n    const clusters = findClusters(agents, settings.neighborRadius);\n    return {\n      timestamp: Date.now(),\n      avgDistance,\n      avgCorrelation,\n      numClusters: clusters.length,\n      avgClusterSize: clusters.length > 0 ? clusters.reduce((sum, c) => sum + c.length, 0) / clusters.length : 0\n    };\n  };\n\n  // Find clusters using DBSCAN-like approach\n  const findClusters = (agents, radius) => {\n    const visited = new Set();\n    const clusters = [];\n    agents.forEach(agent => {\n      if (!visited.has(agent)) {\n        visited.add(agent);\n        const neighbors = getNeighbors(agent, radius);\n        if (neighbors.length >= 3) {\n          // Minimum cluster size\n          const cluster = [agent];\n          neighbors.forEach(neighbor => {\n            if (!visited.has(neighbor)) {\n              visited.add(neighbor);\n              cluster.push(neighbor);\n            }\n          });\n          clusters.push(cluster);\n        }\n      }\n    });\n    return clusters;\n  };\n\n  // Apply flocking rules\n  const updateAgent = agent => {\n    const neighbors = getNeighbors(agent, settings.neighborRadius);\n    if (neighbors.length === 0) return agent;\n\n    // Separation\n    let separationX = 0;\n    let separationY = 0;\n    neighbors.forEach(neighbor => {\n      const d = distance(agent, neighbor);\n      if (d < settings.neighborRadius / 2) {\n        separationX += (agent.x - neighbor.x) / d;\n        separationY += (agent.y - neighbor.y) / d;\n      }\n    });\n\n    // Alignment\n    let avgVx = 0;\n    let avgVy = 0;\n    neighbors.forEach(neighbor => {\n      avgVx += neighbor.vx;\n      avgVy += neighbor.vy;\n    });\n    avgVx /= neighbors.length;\n    avgVy /= neighbors.length;\n\n    // Cohesion\n    let centerX = 0;\n    let centerY = 0;\n    neighbors.forEach(neighbor => {\n      centerX += neighbor.x;\n      centerY += neighbor.y;\n    });\n    centerX /= neighbors.length;\n    centerY /= neighbors.length;\n\n    // Update velocity\n    let vx = agent.vx;\n    let vy = agent.vy;\n    vx += separationX * settings.separationWeight;\n    vy += separationY * settings.separationWeight;\n    vx += (avgVx - agent.vx) * settings.alignmentWeight;\n    vy += (avgVy - agent.vy) * settings.alignmentWeight;\n    vx += (centerX - agent.x) * settings.cohesionWeight;\n    vy += (centerY - agent.y) * settings.cohesionWeight;\n\n    // Limit speed\n    const speed = Math.sqrt(vx * vx + vy * vy);\n    if (speed > settings.maxSpeed) {\n      vx = vx / speed * settings.maxSpeed;\n      vy = vy / speed * settings.maxSpeed;\n    } else if (speed < settings.minSpeed) {\n      vx = vx / speed * settings.minSpeed;\n      vy = vy / speed * settings.minSpeed;\n    }\n    return {\n      x: (agent.x + vx + canvasRef.current.width) % canvasRef.current.width,\n      y: (agent.y + vy + canvasRef.current.height) % canvasRef.current.height,\n      vx: vx,\n      vy: vy\n    };\n  };\n\n  // Animation loop\n  const animate = () => {\n    if (!isRunning) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Clear canvas\n    ctx.fillStyle = '#1a1a1a';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Update agents\n    const updatedAgents = agentsRef.current.map(updateAgent);\n    agentsRef.current = updatedAgents;\n\n    // Calculate metrics every 5 frames to reduce updates\n    if (Date.now() % 5 === 0) {\n      const newMetrics = calculateMetrics(updatedAgents);\n      if (newMetrics) {\n        setMetrics(prev => {\n          const updatedMetrics = [...prev.slice(-50), newMetrics];\n          return updatedMetrics;\n        });\n      }\n    }\n\n    // Draw clusters\n    const clusters = findClusters(updatedAgents, settings.neighborRadius);\n    clusters.forEach((cluster, i) => {\n      ctx.strokeStyle = `hsl(${i * 137 % 360}, 50%, 50%)`;\n      ctx.beginPath();\n      const centerX = cluster.reduce((sum, a) => sum + a.x, 0) / cluster.length;\n      const centerY = cluster.reduce((sum, a) => sum + a.y, 0) / cluster.length;\n      ctx.arc(centerX, centerY, settings.neighborRadius / 2, 0, Math.PI * 2);\n      ctx.stroke();\n    });\n\n    // Draw agents\n    ctx.fillStyle = '#4CAF50';\n    updatedAgents.forEach(agent => {\n      ctx.beginPath();\n      ctx.arc(agent.x, agent.y, 3, 0, Math.PI * 2);\n      ctx.fill();\n    });\n    animationFrameRef.current = requestAnimationFrame(animate);\n  };\n\n  // Setup and cleanup\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = 600;\n    canvas.height = 400;\n    initializeAgents();\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (isRunning) {\n      animate();\n    } else if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n  }, [isRunning]);\n  const handleSettingChange = (setting, value) => {\n    setSettings(prev => ({\n      ...prev,\n      [setting]: parseFloat(value)\n    }));\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-4 space-y-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"space-y-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"text-xl font-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 9\n    }\n  }, \"Swarm Simulation\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 9\n    }\n  }, \"This simulation demonstrates emergent swarm behavior using three classic rules: separation (avoiding crowding), alignment (matching velocity), and cohesion (staying together).\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"space-y-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    className: \"border border-gray-300 rounded-lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex gap-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\",\n    onClick: () => setIsRunning(!isRunning),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 11\n    }\n  }, isRunning ? 'Pause' : 'Start'), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600\",\n    onClick: initializeAgents,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 11\n    }\n  }, \"Reset\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 9\n    }\n  }, Object.entries(settings).map(([key, value]) => /*#__PURE__*/React.createElement(\"div\", {\n    key: key,\n    className: \"space-y-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"text-sm font-medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 15\n    }\n  }, key.charAt(0).toUpperCase() + key.slice(1)), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"range\",\n    min: key.includes('Weight') ? 0 : 1,\n    max: key === 'numAgents' ? 200 : key === 'neighborRadius' ? 100 : key === 'maxSpeed' ? 10 : 5,\n    step: key.includes('Weight') ? 0.1 : 1,\n    value: value,\n    onChange: e => handleSettingChange(key, e.target.value),\n    className: \"w-full\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"text-sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 15\n    }\n  }, value)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"space-y-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"text-lg font-semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 11\n    }\n  }, \"Real-time Metrics\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"h-64\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    width: 600,\n    height: 200,\n    data: metrics,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"timestamp\",\n    type: \"number\",\n    domain: ['auto', 'auto'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"avgDistance\",\n    stroke: \"#8884d8\",\n    name: \"Avg Distance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"avgCorrelation\",\n    stroke: \"#82ca9d\",\n    name: \"Velocity Correlation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"numClusters\",\n    stroke: \"#ffc658\",\n    name: \"Number of Clusters\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 15\n    }\n  }))))));\n};\nexport default SwarmSimulation;","map":{"version":3,"names":["React","useState","useEffect","useRef","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","SwarmSimulation","canvasRef","agentsRef","animationFrameRef","isRunning","setIsRunning","metrics","setMetrics","timestamp","Date","now","avgDistance","avgCorrelation","numClusters","avgClusterSize","settings","setSettings","numAgents","separationWeight","alignmentWeight","cohesionWeight","neighborRadius","maxSpeed","minSpeed","initializeAgents","canvas","current","newAgents","i","push","x","Math","random","width","y","height","vx","vy","distance","a1","a2","dx","dy","sqrt","getNeighbors","agent","radius","filter","other","calculateMetrics","agents","length","totalDistance","pairs","j","totalCorrelation","dot","mag1","mag2","clusters","findClusters","reduce","sum","c","visited","Set","forEach","has","add","neighbors","cluster","neighbor","updateAgent","separationX","separationY","d","avgVx","avgVy","centerX","centerY","speed","animate","ctx","getContext","fillStyle","fillRect","updatedAgents","map","newMetrics","prev","updatedMetrics","slice","strokeStyle","beginPath","a","arc","PI","stroke","fill","requestAnimationFrame","cancelAnimationFrame","handleSettingChange","setting","value","parseFloat","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick","Object","entries","key","charAt","toUpperCase","type","min","includes","max","step","onChange","e","target","data","strokeDasharray","dataKey","domain","name"],"sources":["/Users/yuvvan_talreja/Desktop/Coding/agentic-research/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\nconst SwarmSimulation = () => {\n  const canvasRef = useRef(null);\n  const agentsRef = useRef([]);\n  const animationFrameRef = useRef(null);\n  const [isRunning, setIsRunning] = useState(false);\n  const [metrics, setMetrics] = useState([{\n    timestamp: Date.now(),\n    avgDistance: 0,\n    avgCorrelation: 0,\n    numClusters: 0,\n    avgClusterSize: 0\n  }]);\n  \n  const [settings, setSettings] = useState({\n    numAgents: 50,\n    separationWeight: 2.0,\n    alignmentWeight: 1.0,\n    cohesionWeight: 1.0,\n    neighborRadius: 50,\n    maxSpeed: 3,\n    minSpeed: 1\n  });\n\n  // Initialize agents\n  const initializeAgents = () => {\n    const canvas = canvasRef.current;\n    const newAgents = [];\n    \n    for (let i = 0; i < settings.numAgents; i++) {\n      newAgents.push({\n        x: Math.random() * canvas.width,\n        y: Math.random() * canvas.height,\n        vx: (Math.random() * 2 - 1) * settings.maxSpeed,\n        vy: (Math.random() * 2 - 1) * settings.maxSpeed\n      });\n    }\n    \n    agentsRef.current = newAgents;\n  };\n\n  // Calculate distance between two agents\n  const distance = (a1, a2) => {\n    const dx = a2.x - a1.x;\n    const dy = a2.y - a1.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  };\n\n  // Find neighbors within radius\n  const getNeighbors = (agent, radius) => {\n    return agentsRef.current.filter(other => \n      other !== agent && distance(agent, other) < radius\n    );\n  };\n\n  // Calculate metrics\n  const calculateMetrics = (agents) => {\n    if (agents.length < 2) return null;\n    \n    // Average distance between agents (cohesion metric)\n    let totalDistance = 0;\n    let pairs = 0;\n    for (let i = 0; i < agents.length; i++) {\n      for (let j = i + 1; j < agents.length; j++) {\n        totalDistance += distance(agents[i], agents[j]);\n        pairs++;\n      }\n    }\n    const avgDistance = totalDistance / pairs;\n\n    // Average velocity correlation (alignment metric)\n    let totalCorrelation = 0;\n    pairs = 0;\n    for (let i = 0; i < agents.length; i++) {\n      for (let j = i + 1; j < agents.length; j++) {\n        const dot = agents[i].vx * agents[j].vx + agents[i].vy * agents[j].vy;\n        const mag1 = Math.sqrt(agents[i].vx ** 2 + agents[i].vy ** 2);\n        const mag2 = Math.sqrt(agents[j].vx ** 2 + agents[j].vy ** 2);\n        totalCorrelation += dot / (mag1 * mag2);\n        pairs++;\n      }\n    }\n    const avgCorrelation = totalCorrelation / pairs;\n\n    // Cluster analysis\n    const clusters = findClusters(agents, settings.neighborRadius);\n\n    return {\n      timestamp: Date.now(),\n      avgDistance,\n      avgCorrelation,\n      numClusters: clusters.length,\n      avgClusterSize: clusters.length > 0 ? \n        clusters.reduce((sum, c) => sum + c.length, 0) / clusters.length : 0\n    };\n  };\n\n  // Find clusters using DBSCAN-like approach\n  const findClusters = (agents, radius) => {\n    const visited = new Set();\n    const clusters = [];\n\n    agents.forEach(agent => {\n      if (!visited.has(agent)) {\n        visited.add(agent);\n        const neighbors = getNeighbors(agent, radius);\n        if (neighbors.length >= 3) { // Minimum cluster size\n          const cluster = [agent];\n          neighbors.forEach(neighbor => {\n            if (!visited.has(neighbor)) {\n              visited.add(neighbor);\n              cluster.push(neighbor);\n            }\n          });\n          clusters.push(cluster);\n        }\n      }\n    });\n\n    return clusters;\n  };\n\n  // Apply flocking rules\n  const updateAgent = (agent) => {\n    const neighbors = getNeighbors(agent, settings.neighborRadius);\n    if (neighbors.length === 0) return agent;\n\n    // Separation\n    let separationX = 0;\n    let separationY = 0;\n    neighbors.forEach(neighbor => {\n      const d = distance(agent, neighbor);\n      if (d < settings.neighborRadius / 2) {\n        separationX += (agent.x - neighbor.x) / d;\n        separationY += (agent.y - neighbor.y) / d;\n      }\n    });\n\n    // Alignment\n    let avgVx = 0;\n    let avgVy = 0;\n    neighbors.forEach(neighbor => {\n      avgVx += neighbor.vx;\n      avgVy += neighbor.vy;\n    });\n    avgVx /= neighbors.length;\n    avgVy /= neighbors.length;\n\n    // Cohesion\n    let centerX = 0;\n    let centerY = 0;\n    neighbors.forEach(neighbor => {\n      centerX += neighbor.x;\n      centerY += neighbor.y;\n    });\n    centerX /= neighbors.length;\n    centerY /= neighbors.length;\n\n    // Update velocity\n    let vx = agent.vx;\n    let vy = agent.vy;\n\n    vx += separationX * settings.separationWeight;\n    vy += separationY * settings.separationWeight;\n    vx += (avgVx - agent.vx) * settings.alignmentWeight;\n    vy += (avgVy - agent.vy) * settings.alignmentWeight;\n    vx += (centerX - agent.x) * settings.cohesionWeight;\n    vy += (centerY - agent.y) * settings.cohesionWeight;\n\n    // Limit speed\n    const speed = Math.sqrt(vx * vx + vy * vy);\n    if (speed > settings.maxSpeed) {\n      vx = (vx / speed) * settings.maxSpeed;\n      vy = (vy / speed) * settings.maxSpeed;\n    } else if (speed < settings.minSpeed) {\n      vx = (vx / speed) * settings.minSpeed;\n      vy = (vy / speed) * settings.minSpeed;\n    }\n\n    return {\n      x: (agent.x + vx + canvasRef.current.width) % canvasRef.current.width,\n      y: (agent.y + vy + canvasRef.current.height) % canvasRef.current.height,\n      vx: vx,\n      vy: vy\n    };\n  };\n\n  // Animation loop\n  const animate = () => {\n    if (!isRunning) return;\n    \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    // Clear canvas\n    ctx.fillStyle = '#1a1a1a';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    \n    // Update agents\n    const updatedAgents = agentsRef.current.map(updateAgent);\n    agentsRef.current = updatedAgents;\n    \n    // Calculate metrics every 5 frames to reduce updates\n    if (Date.now() % 5 === 0) {\n      const newMetrics = calculateMetrics(updatedAgents);\n      if (newMetrics) {\n        setMetrics(prev => {\n          const updatedMetrics = [...prev.slice(-50), newMetrics];\n          return updatedMetrics;\n        });\n      }\n    }\n    \n    // Draw clusters\n    const clusters = findClusters(updatedAgents, settings.neighborRadius);\n    clusters.forEach((cluster, i) => {\n      ctx.strokeStyle = `hsl(${(i * 137) % 360}, 50%, 50%)`;\n      ctx.beginPath();\n      const centerX = cluster.reduce((sum, a) => sum + a.x, 0) / cluster.length;\n      const centerY = cluster.reduce((sum, a) => sum + a.y, 0) / cluster.length;\n      ctx.arc(centerX, centerY, settings.neighborRadius / 2, 0, Math.PI * 2);\n      ctx.stroke();\n    });\n\n    // Draw agents\n    ctx.fillStyle = '#4CAF50';\n    updatedAgents.forEach(agent => {\n      ctx.beginPath();\n      ctx.arc(agent.x, agent.y, 3, 0, Math.PI * 2);\n      ctx.fill();\n    });\n    \n    animationFrameRef.current = requestAnimationFrame(animate);\n  };\n\n  // Setup and cleanup\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = 600;\n    canvas.height = 400;\n    initializeAgents();\n\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isRunning) {\n      animate();\n    } else if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n  }, [isRunning]);\n\n  const handleSettingChange = (setting, value) => {\n    setSettings(prev => ({\n      ...prev,\n      [setting]: parseFloat(value)\n    }));\n  };\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"space-y-2\">\n        <h2 className=\"text-xl font-bold\">Swarm Simulation</h2>\n        <p>\n          This simulation demonstrates emergent swarm behavior using three classic rules:\n          separation (avoiding crowding), alignment (matching velocity), and cohesion (staying together).\n        </p>\n      </div>\n      \n      <div className=\"space-y-4\">\n        <canvas\n          ref={canvasRef}\n          className=\"border border-gray-300 rounded-lg\"\n        />\n        \n        <div className=\"flex gap-4\">\n          <button\n            className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n            onClick={() => setIsRunning(!isRunning)}\n          >\n            {isRunning ? 'Pause' : 'Start'}\n          </button>\n          <button\n            className=\"px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600\"\n            onClick={initializeAgents}\n          >\n            Reset\n          </button>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {Object.entries(settings).map(([key, value]) => (\n            <div key={key} className=\"space-y-1\">\n              <label className=\"text-sm font-medium\">\n                {key.charAt(0).toUpperCase() + key.slice(1)}\n              </label>\n              <input\n                type=\"range\"\n                min={key.includes('Weight') ? 0 : 1}\n                max={key === 'numAgents' ? 200 : \n                     key === 'neighborRadius' ? 100 :\n                     key === 'maxSpeed' ? 10 : 5}\n                step={key.includes('Weight') ? 0.1 : 1}\n                value={value}\n                onChange={(e) => handleSettingChange(key, e.target.value)}\n                className=\"w-full\"\n              />\n              <span className=\"text-sm\">{value}</span>\n            </div>\n          ))}\n        </div>\n\n        {/* Metrics visualization */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">Real-time Metrics</h3>\n          <div className=\"h-64\">\n            <LineChart width={600} height={200} data={metrics}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"timestamp\" type=\"number\" domain={['auto', 'auto']} />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Line type=\"monotone\" dataKey=\"avgDistance\" stroke=\"#8884d8\" name=\"Avg Distance\" />\n              <Line type=\"monotone\" dataKey=\"avgCorrelation\" stroke=\"#82ca9d\" name=\"Velocity Correlation\" />\n              <Line type=\"monotone\" dataKey=\"numClusters\" stroke=\"#ffc658\" name=\"Number of Clusters\" />\n            </LineChart>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SwarmSimulation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}